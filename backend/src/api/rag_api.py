"""
RAG API - —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RAG —Å–∏—Å—Ç–µ–º–æ–π
"""
from fastapi import APIRouter, UploadFile, File, HTTPException, Form
from fastapi.responses import JSONResponse
from typing import List, Dict, Any, Optional
from pydantic import BaseModel
import tempfile
import os
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ RAG –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import sys
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from ml.rag_bot.rag_system import RAGSystem

router = APIRouter(tags=["RAG System"])

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è RAG —Å–∏—Å—Ç–µ–º–∞ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
rag_system = None

# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è API
class SearchRequest(BaseModel):
    query: str
    top_k: int = 5

class SearchResult(BaseModel):
    document: str
    similarity: float
    metadata: dict
    id: str

class ChatRequest(BaseModel):
    question: str
    top_k: int = 3

class ChatResponse(BaseModel):
    answer: str
    sources: List[SearchResult]
    question: str

class SimpleChatRequest(BaseModel):
    message: str
    history: Optional[List[Dict[str, str]]] = []

class SimpleChatResponse(BaseModel):
    response: str
    message: str

class LLMConfigRequest(BaseModel):
    provider: str  # 'openai', 'anthropic', 'local'
    model: str
    api_key: Optional[str] = None

class DocumentInfo(BaseModel):
    filename: str
    content_length: int
    file_extension: str
    upload_time: str

def initialize_rag_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º—ã"""
    global rag_system
    
    if rag_system is None:
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG —Å–∏—Å—Ç–µ–º—É...")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        embeddings_model = os.getenv('EMBEDDINGS_MODEL', 'cointegrated/rubert-tiny2')
        llm_provider = os.getenv('LLM_PROVIDER', 'local')
        llm_model = os.getenv('LLM_MODEL', 'microsoft/DialoGPT-medium')
        chunk_size = int(os.getenv('CHUNK_SIZE', '1000'))
        overlap = int(os.getenv('CHUNK_OVERLAP', '200'))
        
        rag_system = RAGSystem(
            embeddings_model=embeddings_model,
            llm_provider=llm_provider,
            llm_model=llm_model,
            chunk_size=chunk_size,
            overlap=overlap
        )
        
        print("‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
# initialize_rag_services()

@router.post("/documents/upload")
async def upload_documents(files: List[UploadFile] = File(...)):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ RAG —Å–∏—Å—Ç–µ–º—É
    
    Args:
        files: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        
    Returns:
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
    """
    initialize_rag_system()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    temp_files = []
    uploaded_docs = []
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
        for file in files:
            temp_file_path = tempfile.mktemp(suffix=Path(file.filename).suffix)
            content = await file.read()
            
            with open(temp_file_path, 'wb') as tmp_file:
                tmp_file.write(content)
            
            temp_files.append(temp_file_path)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ RAG —Å–∏—Å—Ç–µ–º—É
        load_result = rag_system.load_documents(temp_files)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        for i, file in enumerate(files):
            if load_result["success"]:
                uploaded_docs.append({
                    "filename": file.filename,
                    "status": "success",
                    "content_length": len(open(temp_files[i], 'r', encoding='utf-8').read()) if i < len(temp_files) else 0
                })
            else:
                uploaded_docs.append({
                    "filename": file.filename,
                    "status": "error",
                    "error": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
                })
        
        return {
            "message": f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤",
            "results": uploaded_docs,
            "total_documents": load_result["total_documents"],
            "total_chunks": load_result["total_chunks"]
        }
        
    except Exception as e:
        return {
            "message": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: {str(e)}",
            "results": uploaded_docs
        }
        
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for temp_file in temp_files:
            try:
                os.unlink(temp_file)
            except:
                pass

@router.post("/search", response_model=List[SearchResult])
async def search_documents(request: SearchRequest):
    """
    –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
    
    Args:
        request: –ó–∞–ø—Ä–æ—Å —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø–æ–∏—Å–∫–∞
        
    Returns:
        –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """
    initialize_rag_system()
    
    try:
        # –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ RAG —Å–∏—Å—Ç–µ–º—É
        results = rag_system.search(request.query, top_k=request.top_k)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        search_results = []
        for result in results:
            search_results.append(SearchResult(
                document=result['document'],
                similarity=result['similarity'],
                metadata=result['metadata'],
                id=result['id']
            ))
        
        return search_results
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")

@router.post("/chat", response_model=ChatResponse)
async def chat_with_documents(request: ChatRequest):
    """
    –ß–∞—Ç —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ (RAG)
    
    Args:
        request: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –û—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """
    initialize_rag_system()
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º RAG —Å–∏—Å—Ç–µ–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        response = rag_system.ask(request.question, top_k=request.top_k)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        sources = []
        for source in response.get("sources", []):
            sources.append(SearchResult(
                document=source["metadata"].get("document", "")[:200] + "..." if len(source["metadata"].get("document", "")) > 200 else source["metadata"].get("document", ""),
                similarity=source["similarity"],
                metadata=source["metadata"],
                id=source["id"]
            ))
        
        return ChatResponse(
            answer=response["answer"],
            sources=sources,
            question=request.question
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —á–∞—Ç–∞: {str(e)}")

@router.get("/documents/list")
async def list_documents():
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ
    
    Returns:
        –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    """
    initialize_rag_system()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        status = rag_system.get_status()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
        all_data = rag_system.vector_store.collection.get()
        
        documents = []
        if all_data['ids']:
            for i, doc_id in enumerate(all_data['ids']):
                metadata = all_data['metadatas'][i] if all_data['metadatas'] else {}
                documents.append({
                    "id": doc_id,
                    "filename": metadata.get('filename', 'Unknown'),
                    "content_length": metadata.get('content_length', 0),
                    "file_extension": metadata.get('file_extension', ''),
                    "chunk_index": metadata.get('chunk_index', 0),
                    "total_chunks": metadata.get('total_chunks', 1),
                    "content_preview": all_data['documents'][i][:100] + "..." if len(all_data['documents'][i]) > 100 else all_data['documents'][i]
                })
        
        return {
            "total_documents": status["vector_store"]["documents_count"],
            "documents": documents,
            "system_status": status
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {str(e)}")

@router.delete("/documents/{doc_id}")
async def delete_document(doc_id: str):
    """
    –£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    
    Args:
        doc_id: ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        
    Returns:
        –°—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–∏—è
    """
    initialize_rag_system()
    
    try:
        success = rag_system.vector_store.delete_document(doc_id)
        
        if success:
            return {"message": f"–î–æ–∫—É–º–µ–Ω—Ç {doc_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"}
        else:
            raise HTTPException(status_code=404, detail="–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")

@router.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è RAG —Å–∏—Å—Ç–µ–º—ã"""
    initialize_rag_system()
    
    try:
        status = rag_system.get_status()
        
        return {
            "status": "healthy",
            "system_status": status["system_status"],
            "documents_count": status["vector_store"]["documents_count"],
            "embeddings_model": status["embeddings_service"]["model"],
            "llm_status": status["llm_service"]["status"],
            "llm_provider": status["llm_service"]["provider"]
        }
        
    except Exception as e:
        return {
            "status": "error",
            "error": str(e)
        }

@router.post("/simple-chat", response_model=SimpleChatResponse)
async def simple_chat(request: SimpleChatRequest):
    """
    –ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç —Å AI (–±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)
    
    Args:
        request: –°–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
        
    Returns:
        –û—Ç–≤–µ—Ç –æ—Ç AI
    """
    initialize_rag_system()
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º RAG —Å–∏—Å—Ç–µ–º—É –¥–ª—è —á–∞—Ç–∞
        response = rag_system.chat(request.message, request.history)
        
        return SimpleChatResponse(
            response=response["answer"],
            message=request.message
        )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —á–∞—Ç–∞: {str(e)}")

@router.get("/llm-status")
async def get_llm_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å LLM —Å–µ—Ä–≤–∏—Å–∞"""
    initialize_rag_system()
    
    try:
        status = rag_system.get_status()
        return status["llm_service"]
    except Exception as e:
        return {
            "error": str(e),
            "status": "error"
        }

@router.post("/configure-llm")
async def configure_llm(config: LLMConfigRequest):
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
    global rag_system
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API –∫–ª—é—á –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        if config.api_key:
            if config.provider == "openai":
                os.environ['OPENAI_API_KEY'] = config.api_key
            elif config.provider == "anthropic":
                os.environ['ANTHROPIC_API_KEY'] = config.api_key
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º RAG —Å–∏—Å—Ç–µ–º—É —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        rag_system = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–∏—Å—Ç–µ–º—É
        initialize_rag_system()
        
        return {
            "status": "success",
            "message": f"LLM –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {config.provider} - {config.model}",
            "provider": config.provider,
            "model": config.model
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LLM: {str(e)}")

@router.get("/llm-providers")
async def get_llm_providers():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    return {
        "providers": {
            "local": {
                "name": "–õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å",
                "models": [
                    "microsoft/DialoGPT-medium",
                    "microsoft/DialoGPT-small",
                    "gpt2"
                ],
                "requires_api_key": False,
                "description": "–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω–æ"
            },
            "openai": {
                "name": "OpenAI",
                "models": [
                    "gpt-3.5-turbo",
                    "gpt-4",
                    "gpt-4-turbo-preview"
                ],
                "requires_api_key": True,
                "description": "–ë—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ, –Ω—É–∂–µ–Ω API –∫–ª—é—á"
            },
            "anthropic": {
                "name": "Anthropic Claude",
                "models": [
                    "claude-3-haiku-20240307",
                    "claude-3-sonnet-20240229",
                    "claude-3-opus-20240229"
                ],
                "requires_api_key": True,
                "description": "–û—á–µ–Ω—å —É–º–Ω—ã–π, –Ω—É–∂–µ–Ω API –∫–ª—é—á"
            }
        }
    }

@router.delete("/clear-database")
async def clear_database():
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    initialize_rag_system()
    
    try:
        success = rag_system.clear_database()
        
        if success:
            return {"message": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞"}
        else:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}")