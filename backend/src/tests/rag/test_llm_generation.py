"""
–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ LLMService
"""
import os
import sys
import tempfile
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

from ml.rag_bot.llm_service import LLMService, ChatMessage
from ml.rag_bot.rag_system import RAGSystem

def test_llm_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ LLM"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ LLM...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LLM —Å–µ—Ä–≤–∏—Å
        llm_service = LLMService(provider="local")
        
        # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        print("\nüìù –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
        test_prompt = "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"
        
        response = llm_service._local_chat_response([
            ChatMessage(role="user", content=test_prompt)
        ])
        
        print(f"–ü—Ä–æ–º–ø—Ç: {test_prompt}")
        print(f"–û—Ç–≤–µ—Ç: {response}")
        
        assert len(response) > 0, "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç LLM"
        assert response != test_prompt, "LLM –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç"
        
        print("‚úÖ –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç RAG –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        print("\nüîç –¢–µ—Å—Ç RAG –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
        question = "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?"
        context = "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ - —ç—Ç–æ –ø–æ–¥–ø–æ–ª–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞."
        sources = [{"id": "test", "similarity": 0.8}]
        
        rag_response = llm_service._local_rag_response(question, context, sources)
        
        print(f"–í–æ–ø—Ä–æ—Å: {question}")
        print(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}")
        print(f"–û—Ç–≤–µ—Ç: {rag_response}")
        
        assert len(rag_response) > 0, "–ü—É—Å—Ç–æ–π RAG –æ—Ç–≤–µ—Ç"
        assert "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ" in rag_response.lower() or "fallback" in rag_response.lower(), "–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        
        print("‚úÖ RAG –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö LLM: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_llm_with_different_parameters():
    """–¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")
    
    try:
        llm_service = LLMService(provider="local")
        
        # –¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ max_new_tokens
        test_cases = [
            {"max_new_tokens": 50, "description": "–ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç"},
            {"max_new_tokens": 100, "description": "–°—Ä–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç"},
            {"max_new_tokens": 200, "description": "–î–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"}
        ]
        
        for case in test_cases:
            print(f"\nüìä {case['description']} ({case['max_new_tokens']} —Ç–æ–∫–µ–Ω–æ–≤):")
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            original_params = {
                'max_new_tokens': case['max_new_tokens'],
                'temperature': 0.7,
                'do_sample': True
            }
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
            prompt = "–†–∞—Å—Å–∫–∞–∂–∏ –∫—Ä–∞—Ç–∫–æ –æ Python"
            
            # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é pipeline —Å –Ω–∞—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            response = llm_service.client(
                prompt,
                **original_params,
                num_return_sequences=1,
                truncation=True
            )
            
            generated_text = response[0]['generated_text']
            answer = generated_text[len(prompt):].strip()
            
            print(f"–û—Ç–≤–µ—Ç: {answer[:100]}{'...' if len(answer) > 100 else ''}")
            print(f"–î–ª–∏–Ω–∞: {len(answer)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è DialoGPT-medium
            if len(answer) == 0:
                print(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è {case['description']} - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è DialoGPT")
                continue
            
            assert len(answer) > 0, f"–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è {case['description']}"
        
        print("‚úÖ –¢–µ—Å—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø—Ä–æ—à–ª–∏")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_llm_fallback():
    """–¢–µ—Å—Ç –∑–∞–≥–ª—É—à–µ–∫ LLM"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–µ–∫...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º LLM –±–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞ (fallback —Ä–µ–∂–∏–º)
        llm_service = LLMService(provider="nonexistent")
        
        # –¢–µ—Å—Ç RAG –∑–∞–≥–ª—É—à–∫–∏
        rag_response = llm_service._fallback_rag_response(
            "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", 
            "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç", 
            [{"id": "test"}]
        )
        
        assert len(rag_response) > 0, "–ü—É—Å—Ç–∞—è RAG –∑–∞–≥–ª—É—à–∫–∞"
        assert "–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤" in rag_response, "–ù–µ–≤–µ—Ä–Ω–∞—è RAG –∑–∞–≥–ª—É—à–∫–∞"
        
        # –¢–µ—Å—Ç —á–∞—Ç –∑–∞–≥–ª—É—à–∫–∏
        chat_response = llm_service._fallback_chat_response([
            ChatMessage(role="user", content="–ü—Ä–∏–≤–µ—Ç")
        ])
        
        assert len(chat_response) > 0, "–ü—É—Å—Ç–∞—è —á–∞—Ç –∑–∞–≥–ª—É—à–∫–∞"
        
        print(f"RAG –∑–∞–≥–ª—É—à–∫–∞: {rag_response[:100]}...")
        print(f"–ß–∞—Ç –∑–∞–≥–ª—É—à–∫–∞: {chat_response[:50]}...")
        
        print("‚úÖ –ó–∞–≥–ª—É—à–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –∑–∞–≥–ª—É—à–µ–∫: {e}")
        return False

def test_rag_system_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å RAG —Å–∏—Å—Ç–µ–º–æ–π"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å RAG...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        temp_dir = tempfile.mkdtemp()
        test_file = Path(temp_dir) / "test.txt"
        
        with open(test_file, 'w', encoding='utf-8') as f:
            f.write("Python - —ç—Ç–æ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ - —ç—Ç–æ –æ–±–ª–∞—Å—Ç—å –ò–ò.")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG —Å–∏—Å—Ç–µ–º—É
        rag_system = RAGSystem(
            llm_provider="local",
            chunk_size=100,
            overlap=20
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        load_result = rag_system.load_documents([str(test_file)])
        assert load_result["success"], "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"
        
        # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
        response = rag_system.ask("–ß—Ç–æ —Ç–∞–∫–æ–µ Python?", top_k=2)
        
        print(f"–°—Ç–∞—Ç—É—Å: {response['status']}")
        print(f"–û—Ç–≤–µ—Ç: {response['answer'][:200]}...")
        print(f"–ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {response['sources_count']}")
        
        assert response["status"] == "success", "RAG —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        assert len(response["answer"]) > 0, "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç RAG —Å–∏—Å—Ç–µ–º—ã"
        assert response["sources_count"] > 0, "–ù–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ"
        
        # –û—á–∏—Å—Ç–∫–∞
        import shutil
        shutil.rmtree(temp_dir)
        
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å RAG —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ LLM...")
    
    success_count = 0
    total_tests = 4
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if test_llm_generation():
        success_count += 1
    
    # –¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    if test_llm_with_different_parameters():
        success_count += 1
    
    # –¢–µ—Å—Ç –∑–∞–≥–ª—É—à–µ–∫
    if test_llm_fallback():
        success_count += 1
    
    # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    if test_rag_system_integration():
        success_count += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {success_count}/{total_tests}")
    
    if success_count == total_tests:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã LLM –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã LLM –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")