import tempfile
import os
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à TextSplitter
import sys
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'ml', 'rag_bot'))

from text_splitter import TextSplitter

def test_text_splitter_basic():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ TextSplitter"""
    splitter = TextSplitter(chunk_size=100, overlap=20)
    
    # –¢–µ—Å—Ç —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
    short_text = "–≠—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç."
    chunks = splitter.split_text(short_text)
    assert len(chunks) == 1
    assert chunks[0] == short_text
    
    # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
    empty_chunks = splitter.split_text("")
    assert empty_chunks == []
    
    # –¢–µ—Å—Ç —Å None
    none_chunks = splitter.split_text(None)
    assert none_chunks == []

def test_text_splitter_long_text():
    """–¢–µ—Å—Ç —Ä–∞–∑–±–∏–µ–Ω–∏—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    splitter = TextSplitter(chunk_size=200, overlap=50)
    
    long_text = """
    –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ - —ç—Ç–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Å–ø–æ—Å–æ–±–∞ –æ–±—É—á–µ–Ω–∏—è –ª—é–¥–µ–π, –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–ª—É—á—à–∞—è —Å–≤–æ—é —Ç–æ—á–Ω–æ—Å—Ç—å. 
    –ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ - —ç—Ç–æ –ø–æ–¥–ø–æ–ª–µ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç—è—Ö —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Å–ª–æ–µ–≤. 
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ (NLP) - —ç—Ç–æ –æ–±–ª–∞—Å—Ç—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º –ø–æ–Ω–∏–º–∞—Ç—å, –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –º–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º —è–∑—ã–∫–æ–º.
    """
    
    chunks = splitter.split_text(long_text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Ä–∞–∑–±–∏–ª—Å—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞–Ω–∫–æ–≤
    assert len(chunks) > 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥—ã–π —á–∞–Ω–∫ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
    for chunk in chunks:
        assert len(chunk) <= splitter.chunk_size + 100  # –ù–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
    combined_text = " ".join(chunks)
    assert "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ" in combined_text.lower()
    assert "–≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ" in combined_text.lower()

def test_text_splitter_overlap():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏"""
    splitter = TextSplitter(chunk_size=150, overlap=30)
    
    text = """
    –ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏.
    –í—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ç–µ–º—É –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª–∏.
    –¢—Ä–µ—Ç—å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –º—ã—Å–ª—å –∏ –ø–æ–¥–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–∏.
    –ß–µ—Ç–≤–µ—Ä—Ç–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é —Ç–µ–º—É –æ –≥–ª—É–±–æ–∫–æ–º –æ–±—É—á–µ–Ω–∏–∏.
    –ü—è—Ç–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç —Ç–µ–º—É –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π.
    """
    
    chunks = splitter.split_text(text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –º–µ–∂–¥—É —Å–æ—Å–µ–¥–Ω–∏–º–∏ —á–∞–Ω–∫–∞–º–∏
    if len(chunks) > 1:
        for i in range(1, len(chunks)):
            prev_chunk = chunks[i-1]
            current_chunk = chunks[i]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –æ–±—â–∏–µ —Å–ª–æ–≤–∞
            prev_words = set(prev_chunk.lower().split())
            current_words = set(current_chunk.lower().split())
            common_words = prev_words.intersection(current_words)
            
            # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ
            assert len(common_words) > 0, f"–ù–µ—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏ {i-1} –∏ {i}"

def test_text_splitter_sentence_boundaries():
    """–¢–µ—Å—Ç —Ä–∞–∑–±–∏–µ–Ω–∏—è –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    splitter = TextSplitter(chunk_size=100, overlap=20)
    
    text = "–ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –í—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! –¢—Ä–µ—Ç—å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ? –ß–µ—Ç–≤–µ—Ä—Ç–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ."
    chunks = splitter.split_text(text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ —Ä–∞–∑—Ä—ã–≤–∞—é—Ç—Å—è –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ
    for chunk in chunks:
        # –ö–∞–∂–¥—ã–π —á–∞–Ω–∫ –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –∑–Ω–∞–∫–æ–º –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        assert chunk.endswith(('.', '!', '?')), f"–ß–∞–Ω–∫ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–Ω–∞–∫–æ–º –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è: {chunk}"

def test_text_splitter_clean_text():
    """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
    splitter = TextSplitter()
    
    messy_text = "–¢–µ–∫—Å—Ç   —Å    –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏    –ø—Ä–æ–±–µ–ª–∞–º–∏.\n\n–ò —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫."
    chunks = splitter.split_text(messy_text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã —É–¥–∞–ª–µ–Ω—ã
    for chunk in chunks:
        assert "   " not in chunk, "–í —á–∞–Ω–∫–µ –æ—Å—Ç–∞–ª–∏—Å—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã"
        assert "\n\n" not in chunk, "–í —á–∞–Ω–∫–µ –æ—Å—Ç–∞–ª–∏—Å—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã"

def test_text_splitter_unicode():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ Unicode —Å–∏–º–≤–æ–ª–æ–≤"""
    splitter = TextSplitter(chunk_size=100, overlap=20)
    
    unicode_text = "–¢–µ–∫—Å—Ç —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏: –ø—Ä–∏–≤–µ—Ç –º–∏—Ä! üöÄ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –∫—Ä—É—Ç–æ. √âmojis and accents are supported too."
    chunks = splitter.split_text(unicode_text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Unicode —Å–∏–º–≤–æ–ª—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    combined_text = " ".join(chunks)
    assert "üöÄ" in combined_text
    assert "–ø—Ä–∏–≤–µ—Ç –º–∏—Ä" in combined_text
    assert "√âmojis" in combined_text

def test_text_splitter_edge_cases():
    """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    splitter = TextSplitter(chunk_size=50, overlap=10)
    
    # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    long_sentence = "–≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ " * 20 + "–∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞."
    chunks = splitter.split_text(long_sentence)
    
    # –î–æ–ª–∂–µ–Ω —Ä–∞–∑–±–∏—Ç—å—Å—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞–Ω–∫–æ–≤
    assert len(chunks) > 1
    
    # –¢–æ–ª—å–∫–æ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
    punctuation_text = "! ? . !!! ??? ..."
    chunks = splitter.split_text(punctuation_text)
    assert len(chunks) >= 1

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ TextSplitter...")
    
    try:
        test_text_splitter_basic()
        print("‚úÖ –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        
        test_text_splitter_long_text()
        print("‚úÖ –¢–µ—Å—Ç –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω")
        
        test_text_splitter_overlap()
        print("‚úÖ –¢–µ—Å—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–π–¥–µ–Ω")
        
        test_text_splitter_sentence_boundaries()
        print("‚úÖ –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø—Ä–æ–π–¥–µ–Ω")
        
        test_text_splitter_clean_text()
        print("‚úÖ –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω")
        
        test_text_splitter_unicode()
        print("‚úÖ –¢–µ—Å—Ç Unicode –ø—Ä–æ–π–¥–µ–Ω")
        
        test_text_splitter_edge_cases()
        print("‚úÖ –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –ø—Ä–æ–π–¥–µ–Ω")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã TextSplitter —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()