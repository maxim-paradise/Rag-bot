"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ RAG pipeline
"""
import os
import sys
import tempfile
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

from ml.rag_bot.rag_system import RAGSystem
from ml.rag_bot.document_loader import DocumentLoader

def create_test_documents():
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
    test_docs = {
        "ai_basics.txt": """
        –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç (–ò–ò) - —ç—Ç–æ –æ–±–ª–∞—Å—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω.
        –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ - —ç—Ç–æ –ø–æ–¥–ø–æ–ª–µ –ò–ò, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º —É—á–∏—Ç—å—Å—è –±–µ–∑ —è–≤–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.
        –ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—è–º–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á.
        """,
        
        "python_programming.txt": """
        Python - —ç—Ç–æ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—â–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.
        Python –∏–∑–≤–µ—Å—Ç–µ–Ω —Å–≤–æ–µ–π –ø—Ä–æ—Å—Ç–æ—Ç–æ–π –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å—é –∫–æ–¥–∞.
        –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Python –≤–∫–ª—é—á–∞—é—Ç NumPy, Pandas, TensorFlow –∏ PyTorch.
        Django –∏ Flask - —ç—Ç–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ –¥–ª—è Python.
        """,
        
        "data_science.txt": """
        –ù–∞—É–∫–∞ –æ –¥–∞–Ω–Ω—ã—Ö —Å–æ—á–µ—Ç–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥–º–µ—Ç–Ω—É—é —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É.
        –û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏: —Å–±–æ—Ä, –æ—á–∏—Å—Ç–∫–∞, –∞–Ω–∞–ª–∏–∑ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è.
        Pandas - –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ Python.
        Matplotlib –∏ Seaborn –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
        """
    }
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    temp_dir = tempfile.mkdtemp()
    
    for filename, content in test_docs.items():
        file_path = Path(temp_dir) / filename
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content.strip())
    
    return temp_dir, list(test_docs.keys())

def test_full_pipeline():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ RAG pipeline"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ RAG pipeline...")
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        print("\nüìö –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
        temp_dir, doc_names = create_test_documents()
        
        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG —Å–∏—Å—Ç–µ–º—É
        print("\nüöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG —Å–∏—Å—Ç–µ–º—É...")
        rag_system = RAGSystem(
            embeddings_model="cointegrated/rubert-tiny2",
            llm_provider="local",
            chunk_size=200,
            overlap=50
        )
        
        # 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        print("\nüìñ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
        file_paths = [str(Path(temp_dir) / name) for name in doc_names]
        load_result = rag_system.load_documents(file_paths)
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏: {load_result}")
        assert load_result["success"], "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ —É–¥–∞–ª–∞—Å—å"
        assert load_result["total_documents"] == 3, f"–û–∂–∏–¥–∞–ª–æ—Å—å 3 –¥–æ–∫—É–º–µ–Ω—Ç–∞, –ø–æ–ª—É—á–µ–Ω–æ {load_result['total_documents']}"
        assert load_result["total_chunks"] > 0, "–ù–µ —Å–æ–∑–¥–∞–Ω—ã —á–∞–Ω–∫–∏"
        
        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫...")
        search_results = rag_system.search("–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", top_k=3)
        assert len(search_results) > 0, "–ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        for i, result in enumerate(search_results):
            print(f"  {i+1}. –°—Ö–æ–¥—Å—Ç–≤–æ: {result['similarity']:.3f}")
            print(f"     –§–∞–π–ª: {result['metadata']['filename']}")
            print(f"     –¢–µ–∫—Å—Ç: {result['document'][:100]}...")
        
        # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º RAG –æ—Ç–≤–µ—Ç—ã
        print("\n‚ùì –¢–µ—Å—Ç–∏—Ä—É–µ–º RAG –æ—Ç–≤–µ—Ç—ã...")
        
        test_questions = [
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
            "–ö–∞–∫–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Python –ø–æ–ø—É–ª—è—Ä–Ω—ã?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—É–∫–∞ –æ –¥–∞–Ω–Ω—ã—Ö?",
            "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Python?"
        ]
        
        for question in test_questions:
            print(f"\n–í–æ–ø—Ä–æ—Å: {question}")
            response = rag_system.ask(question, top_k=3)
            
            print(f"–°—Ç–∞—Ç—É—Å: {response['status']}")
            print(f"–ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {response['sources_count']}")
            print(f"–û—Ç–≤–µ—Ç: {response['answer'][:200]}...")
            
            assert response["status"] in ["success", "no_results"], f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response['status']}"
            if response["status"] == "success":
                assert len(response["answer"]) > 0, "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"
                assert response["sources_count"] > 0, "–ù–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"
        
        # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Ç
        print("\nüí¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Ç...")
        chat_response = rag_system.chat("–†–∞—Å—Å–∫–∞–∂–∏ –æ Python")
        print(f"–¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {chat_response['type']}")
        print(f"–û—Ç–≤–µ—Ç: {chat_response['answer'][:200]}...")
        
        assert chat_response["status"] == "success", "–ß–∞—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        assert len(chat_response["answer"]) > 0, "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —á–∞—Ç–∞"
        
        # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        print("\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã...")
        status = rag_system.get_status()
        print(f"–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status['system_status']}")
        print(f"–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ë–î: {status['vector_store']['documents_count']}")
        print(f"LLM —Å—Ç–∞—Ç—É—Å: {status['llm_service']['status']}")
        
        assert status["system_status"] == "ready", "–°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞"
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø–æ–ª–Ω–æ–≥–æ pipeline –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
        # –û—á–∏—Å—Ç–∫–∞
        import shutil
        shutil.rmtree(temp_dir)
        print("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        
        # –û—á–∏—Å—Ç–∫–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            import shutil
            shutil.rmtree(temp_dir)
        except:
            pass
        
        return False

def test_edge_cases():
    """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤...")
    
    try:
        rag_system = RAGSystem()
        
        # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
        response = rag_system.ask("")
        assert response["status"] in ["success", "no_results"], "–ü—É—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è"
        
        # –¢–µ—Å—Ç —Å –≤–æ–ø—Ä–æ—Å–æ–º –±–µ–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        response = rag_system.ask("–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –±–æ—Ä—â?")
        assert response["status"] in ["success", "no_results"], "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å"
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        search_results = rag_system.search("–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ç–µ–º–∞", top_k=5)
        assert isinstance(search_results, list), "–ü–æ–∏—Å–∫ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫"
        
        print("‚úÖ –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö: {e}")
        return False

def test_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    try:
        import time
        
        rag_system = RAGSystem()
        
        # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∏—Å–∫–∞
        start_time = time.time()
        results = rag_system.search("–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", top_k=10)
        search_time = time.time() - start_time
        
        print(f"–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {search_time:.3f} —Å–µ–∫")
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
        
        # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        start_time = time.time()
        response = rag_system.ask("–ß—Ç–æ —Ç–∞–∫–æ–µ –ò–ò?", top_k=3)
        answer_time = time.time() - start_time
        
        print(f"–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {answer_time:.3f} —Å–µ–∫")
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response['status']}")
        
        assert search_time < 5.0, f"–ü–æ–∏—Å–∫ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π: {search_time:.3f} —Å–µ–∫"
        assert answer_time < 10.0, f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–∞—è: {answer_time:.3f} —Å–µ–∫"
        
        print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ–ª–Ω–æ–≥–æ RAG pipeline...")
    
    success_count = 0
    total_tests = 3
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç pipeline
    if test_full_pipeline():
        success_count += 1
    
    # –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    if test_edge_cases():
        success_count += 1
    
    # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if test_performance():
        success_count += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {success_count}/{total_tests}")
    
    if success_count == total_tests:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print("‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")