"""
LLM Service - —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
"""
from typing import List, Dict, Any, Optional
import os
from dataclasses import dataclass

@dataclass
class ChatMessage:
    role: str  # 'system', 'user', 'assistant'
    content: str

class LLMService:
    def __init__(self, provider: str = "local", model: str = "microsoft/DialoGPT-medium"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM —Å–µ—Ä–≤–∏—Å–∞
        
        Args:
            provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä LLM ('openai', 'anthropic', 'local')
            model: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        """
        self.provider = provider
        self.model = model
        self.client = None
        
        print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LLM —Å–µ—Ä–≤–∏—Å: {provider} - {model}")
        
        if provider == "openai":
            self._init_openai()
        elif provider == "anthropic":
            self._init_anthropic()
        elif provider == "local":
            self._init_local()
        else:
            print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É.")
    
    def _init_openai(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI"""
        try:
            import openai
            
            api_key = os.getenv('OPENAI_API_KEY')
            if not api_key:
                print("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É.")
                return
            
            self.client = openai.OpenAI(api_key=api_key)
            print("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except ImportError:
            print("‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ openai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install openai")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI: {e}")
    
    def _init_anthropic(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Anthropic Claude"""
        try:
            import anthropic
            
            api_key = os.getenv('ANTHROPIC_API_KEY')
            if not api_key:
                print("‚ö†Ô∏è ANTHROPIC_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É.")
                return
            
            self.client = anthropic.Anthropic(api_key=api_key)
            print("‚úÖ Anthropic –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except ImportError:
            print("‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ anthropic –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install anthropic")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Anthropic: {e}")
    
    def _init_local(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        try:
            from transformers import pipeline, AutoTokenizer
            
            print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏ —Ç–æ–∫–µ–Ω–∞–π–∑–µ—Ä –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
            model_name = "microsoft/DialoGPT-medium"
            tokenizer = AutoTokenizer.from_pretrained(model_name)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pad_token –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if tokenizer.pad_token is None:
                tokenizer.pad_token = tokenizer.eos_token
            
            self.client = pipeline(
                "text-generation",
                model=model_name,
                tokenizer=tokenizer,
                return_full_text=False  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            )
            print("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
        except ImportError:
            print("‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ transformers –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏: {e}")
    
    def generate_rag_response(self, question: str, context: str, sources: List[Dict]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (RAG)
        
        Args:
            question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            sources: –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        if not self.client:
            return self._fallback_rag_response(question, context, sources)
        
        try:
            if self.provider == "openai":
                return self._openai_rag_response(question, context, sources)
            elif self.provider == "anthropic":
                return self._anthropic_rag_response(question, context, sources)
            elif self.provider == "local":
                return self._local_rag_response(question, context, sources)
            else:
                return self._fallback_rag_response(question, context, sources)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return self._fallback_rag_response(question, context, sources)
    
    def generate_chat_response(self, messages: List[ChatMessage]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ –æ–±—ã—á–Ω–æ–º —á–∞—Ç–µ (–±–µ–∑ RAG)
        
        Args:
            messages: –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        if not self.client:
            return self._fallback_chat_response(messages)
        
        try:
            if self.provider == "openai":
                return self._openai_chat_response(messages)
            elif self.provider == "anthropic":
                return self._anthropic_chat_response(messages)
            elif self.provider == "local":
                return self._local_chat_response(messages)
            else:
                return self._fallback_chat_response(messages)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return self._fallback_chat_response(messages)
    
    def _openai_rag_response(self, question: str, context: str, sources: List[Dict]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è RAG –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ OpenAI"""
        system_prompt = """–¢—ã - —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.

–ü—Ä–∞–≤–∏–ª–∞:
1. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
2. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏
3. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
4. –ë—É–¥—å —Ç–æ—á–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º
5. –£–∫–∞–∑—ã–≤–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ—è—Å–Ω–æ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""

        user_prompt = f"""–í–æ–ø—Ä–æ—Å: {question}

–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:
{context}

–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""

        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            max_tokens=1000,
            temperature=0.7
        )
        
        return response.choices[0].message.content
    
    def _openai_chat_response(self, messages: List[ChatMessage]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ OpenAI"""
        openai_messages = [
            {"role": msg.role, "content": msg.content} 
            for msg in messages
        ]
        
        response = self.client.chat.completions.create(
            model=self.model,
            messages=openai_messages,
            max_tokens=1000,
            temperature=0.8
        )
        
        return response.choices[0].message.content
    
    def _anthropic_rag_response(self, question: str, context: str, sources: List[Dict]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è RAG –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Anthropic"""
        prompt = f"""–¢—ã - —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.

–í–æ–ø—Ä–æ—Å: {question}

–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:
{context}

–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""

        response = self.client.messages.create(
            model=self.model,
            max_tokens=1000,
            messages=[{"role": "user", "content": prompt}]
        )
        
        return response.content[0].text
    
    def _anthropic_chat_response(self, messages: List[ChatMessage]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ Anthropic"""
        anthropic_messages = [
            {"role": msg.role, "content": msg.content} 
            for msg in messages if msg.role != "system"
        ]
        
        response = self.client.messages.create(
            model=self.model,
            max_tokens=1000,
            messages=anthropic_messages
        )
        
        return response.content[0].text
    
    def _local_rag_response(self, question: str, context: str, sources: List[Dict]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è RAG –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å"""
        # –°–æ–∫—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
        max_context_length = 300
        if len(context) > max_context_length:
            context = context[:max_context_length] + "..."
        
        prompt = f"–í–æ–ø—Ä–æ—Å: {question}\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n–û—Ç–≤–µ—Ç:"
        
        try:
            response = self.client(
                prompt, 
                max_new_tokens=100,  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ 100 –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
                num_return_sequences=1,
                truncation=True,
                do_sample=True,
                temperature=0.7,
                top_p=0.9
            )
            
            generated_text = response[0]['generated_text']
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ "–û—Ç–≤–µ—Ç:"
            if "–û—Ç–≤–µ—Ç:" in generated_text:
                answer = generated_text.split("–û—Ç–≤–µ—Ç:")[-1].strip()
            else:
                answer = generated_text.strip()
            
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            if len(answer) < 10:
                return self._fallback_rag_response(question, context, sources)
            
            return answer
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ RAG –æ—Ç–≤–µ—Ç–∞: {e}")
            return self._fallback_rag_response(question, context, sources)
    
    def _local_chat_response(self, messages: List[ChatMessage]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å"""
        last_message = messages[-1].content if messages else "–ü—Ä–∏–≤–µ—Ç"
        
        try:
            response = self.client(
                last_message, 
                max_new_tokens=80,  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ 80 –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
                num_return_sequences=1,
                truncation=True,
                do_sample=True,
                temperature=0.8,
                top_p=0.9
            )
            
            generated_text = response[0]['generated_text']
            answer = generated_text.strip()
            
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            if len(answer) < 5:
                return self._fallback_chat_response(messages)
            
            return answer
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–∞—Ç –æ—Ç–≤–µ—Ç–∞: {e}")
            return self._fallback_chat_response(messages)
    
    def _fallback_rag_response(self, question: str, context: str, sources: List[Dict]) -> str:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è RAG –æ—Ç–≤–µ—Ç–æ–≤"""
        return f"–ù–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {context[:300]}{'...' if len(context) > 300 else ''}"
    
    def _fallback_chat_response(self, messages: List[ChatMessage]) -> str:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞"""
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, LLM —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å LLM —Å–µ—Ä–≤–∏—Å–∞"""
        return {
            "provider": self.provider,
            "model": self.model,
            "client_available": self.client is not None,
            "status": "ready" if self.client else "fallback"
        }